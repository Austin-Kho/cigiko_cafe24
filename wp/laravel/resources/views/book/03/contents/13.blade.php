  <h2 class="page-header">{{$sub[$id][1]}}</h2>
  <div class="chapter">
    <section>
      <article>
        <p>플라스크(Flask)는 1장에서 소개했듯이 웹 애플리케이션을 개발하는데 필요한 마이크로 웹 프레임워크이다. 최소설정만으로 바로 사용할 수 있는 장점 때문에 최소한의 코딩으로 웹페이지를 빠르게 프로토타이핑하고 싶을 때 많이 이용된다.</p>
        <p>이 장에서 플라스크를 이용하는 방법을 살펴보고 우리가 만들고 정제한 데이터를 제공하는 API서버를 만들어 보자.</p>
      </article>
    </section>
  </div>

  <h3 class="sub-header">11.1. 설치와 Hello World 웹 페이지 실행하기</h3>
  <div class="chapter">
    <section>
      <article>
        <p>플라스크를 설치할 때는 다음 명령을 이용한다. 만약 pip가 설치되어 있지 않다면 부록 A를 참고해 pip를 설치한 후 명령을 실행하면 된다.</p>
        <pre><code><blockquote><ol><li>$&nbsp;pip&nbsp;install&nbsp;Flask</li></ol></blockquote></code></pre>
        <p>다음으로 Hello World를 표시하는 웹 애플리케이션을 만들어보자. 다음 코드를 hello.py 라는 파일명으로 저장한다.</p>
        <h5>코드11-1 Hello World! 웹 애플리케이션 만들기</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#808080">#&nbsp;플라스크를&nbsp;불러옵니다.</font></li><li><font color="#ff7700">from</font>&nbsp;flask&nbsp;<font color="#ff7700">import</font>&nbsp;Flask</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;플라스크&nbsp;앱을&nbsp;생성합니다.</font></li><li>app&nbsp;<font color="#66cc66">=</font>&nbsp;Flask<font>&#40;</font>__name__<font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;편의를&nbsp;위한&nbsp;디버그&nbsp;모드를&nbsp;활성화&nbsp;합니다.</font></li><li>app.<font>debug</font>&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#008000">True</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;URL&nbsp;경로에&nbsp;따라&nbsp;실행할&nbsp;함수에&nbsp;디코레이터를&nbsp;사용&nbsp;합니다.@app.route(URL)</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;앞&nbsp;경로에&nbsp;접근하면&nbsp;실행할&nbsp;함수입니다.</font></li><li><font color="#ff7700">def</font>&nbsp;hello<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;<font color="#483d8b">&quot;Hello&nbsp;World!&quot;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;이&nbsp;파일을&nbsp;바로&nbsp;실행할&nbsp;때&nbsp;함께&nbsp;실행할&nbsp;코드를&nbsp;적습니다.</font></li><li><font color="#ff7700">if</font>&nbsp;__name__&nbsp;<font color="#66cc66">==</font>&nbsp;<font color="#483d8b">&quot;__main__&quot;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;앞에서&nbsp;생성한&nbsp;플라스크&nbsp;애플리케이션을&nbsp;실행합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;app.<font>run</font><font>&#40;</font><font>&#41;</font></li></ol></blockquote></code></pre>
        <p>hello.py 파일로 저장을 완료하였다면 실행해보자.</p>
        <pre><code>$ python3 hello.py<br>
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)<br>
 * Restarting with stat<br>
 * Debugger is active!<br>
 * Debugger PIN: 235-437-353</code></pre>
        <p>명령 아래 메시지에 보면 http://127.0.0.1:5000/ 에 웹 애플리케이션을 실행했다고 나온다. 브라우저에서 이 주소에 접속하면 'Hello World!' 가 나타난다.</p>
      </article>
    </section>
  </div>

  <h3 class="sub-header">11.2. 파라미터로 URL 경로와 쿼리 추가하기</h3>
  <div class="chapter">
    <section>
      <article>
        <p>앞절에서 만든 간단한 웹페이지에 파라미터를 이용해서 경로와 쿼리를 추가하고 약간의 문자열을 덧붙여 보여주는 웹페이지를 만들어보자.</p>
        <p>플라스크에서 URL 경로를 파라미터로 받으려면 [변수이름]을 사용하면 된다.</p>

        <h5>코드11-2 경로 추가와 웹 페이지 수정</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#808080">#&nbsp;[name]&nbsp;자리에&nbsp;오는&nbsp;문자열은&nbsp;name&nbsp;에&nbsp;할당되어&nbsp;함수로&nbsp;전달합니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/hello/[name]&quot;</font><font>&#41;</font></li><li><font color="#ff7700">def</font>&nbsp;hello_to<font>&#40;</font>name<font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;<font color="#483d8b">&quot;Hello,&nbsp;{}!&quot;</font>.<font>format</font><font>&#40;</font>name<font>&#41;</font></li></ol></blockquote></code></pre>
        <p>이제 앞 함수를 hello.py 파일의 <code>if __name__ == "__main__":</code> 구문 위에 삽입한 채 hello.py 파일을 저장하고 'http://127.0.0.1/hello/[name]' 에 접속한다. /hello/뒤에는 넣고 싶은 문자열을 적으면 된다.</p>

        <p>다음은 '?key1=value1&key2=value2'와 같은 URL쿼리를 파라미터로 추가해보자. 이때는 먼저 새로운 request 객체를 불러와야 한다. 참고로 request 객체는 요청 데이터를 파싱해서 전역 객체로 데이터에 접근하게 해주는 역할을 한다.</p>

        <p>hello.py 의 첫 부분에 다음 코드를 추가한다.</p>
        <h5>코드11-3 새로운 request 객체 불러오기</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#ff7700">from</font>&nbsp;flask&nbsp;<font color="#ff7700">import</font>&nbsp;request</li></ol></blockquote></code></pre>
        <p>그리고 다음 함수를 추가한다. 앞에서 추가한 request 객체를 사용해 요청을 받았을 때 함께 추가되는 다양한 변수에 접근할 수 있다.</p>
        <h5>코드11-4 요청 저장</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/hello&quot;</font><font>&#41;</font></li><li><font color="#ff7700">def</font>&nbsp;hello_to_get_param<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;/hello?name=miku와&nbsp;같은&nbsp;형식의&nbsp;요청을&nbsp;받아서</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;?name=[이름]의&nbsp;값이&nbsp;오면&nbsp;[이름]을&nbsp;name에&nbsp;저장합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;<font color="#66cc66">=</font>&nbsp;request.<font>args</font>.<font>get</font><font>&#40;</font><font color="#483d8b">&quot;name&quot;</font><font>&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;<font color="#483d8b">&quot;Hello,&nbsp;{}!&quot;</font>.<font>format</font><font>&#40;</font>name<font>&#41;</font></li></ol></blockquote></code></pre>
        <p>이를 이용해 쿼리가 만들어진다. 이제 'http://127.0.0.1:5000/hello?name=[name]' 에 접속해 보자. [name] 부분은 임의의 문자열을 입력한다.</p>
        <p>이렇게 URL의 경로와 쿼리를 파라미터로 추가하는 방법을 살펴 보았다. 이걸로 우리가 수집한 데이터를 제공할 수 있는 수단은 모두 배운 셈이다. 본격적으로 API 서버를 만들어 보자.</p>
      </article>
    </section>
  </div>

  <h3 class="sub-header">11.3. API 서버 만들기</h3>
  <div class="chapter">
    <section>
      <article>
        <p>API는 'Application Program Interface'의 약자이다. 매우 포괄적인 개념이지만 간단히 이야기하자면 서로 다른 프로그램 사이에 통신할 수 있는 약속이라고 생각하면 된다. 좀 더 구체적으로 말하자면 입력에 따른 출력이 정해진, 서로 다른 플랫폼/프로그램/기기 사이의 약속이다. 따라서 잘 정의된 API를 이용하면 개발 과정이 매우 편하다.</p>
        <p>최근 유명 웹서비스들은 해당 서비스를 이용한 별도의 애플리케이션 개발을 지원하는 API를 제공한다. 이를 'API 서버'라고 한다. 유명한 API로는 <a href="https://www.instagram.com/developer" target="_blank">인스타그램 API</a> 나 <a href="https://developers.facebook.com/docs/graph-api" target="_blank">페이스북의 그래프 API</a>등이 있다.</p>
        <p>이 절에서는 앞서 9장에서 크롤링하고 10장에서 데이터베이스에 저장한 데이터를 이용해 한빛미디어가 발간할 책을 조회하는 API를 만들어보자. 파일 이름은 <code>hanbit.py</code> 이다.</p>
      </article>
    </section>

    <h4 class="sub-header">11.3.1 - 데이터베이스와 연결하기</h4>
    <section>
      <article>
        <p>먼저 데이터베이스를 연결하는 함수부터 만들어보자.</p>
        <h5>코드11-5 데이터베이스 연결</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#ff7700">def</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;-<font color="#66cc66">&gt;</font>&nbsp;sqlite3.<font>connect</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;sqlite3.<font>connect</font><font>&#40;</font><font color="#483d8b">&quot;db.sqlite&quot;</font><font>&#41;</font></li></ol></blockquote></code></pre>
        <p>데이터베이스 연결을 설정하는 코드를 매번 호출하는건 귀찮은 일이므로 플라스크에서는 애플리케이션이나 요청 컨텍스트에서 변수들을 관리하는 방법 몇 가지를 제공한다. 실제 서비스에 쓸만하게 만들고 싶다면 '<a href="http://flask.pocoo.org/docs/0.12/tutorial/dbcon" target="_blank">Step 4: Database Connections</a>'에서 도움을 얻을 수 있다.</p>
      </article>
    </section>

    <h4 class="sub-header">11.3.2 - 모든 데이터 내려받기</h4>
    <section>
      <article>
        <p>먼저 데이터를 모두 내려받는다. hello()함수를 [코드11-6]과 같이 만든다.</p>
        <h5>코드11-6 모든 데이터 내려받기</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#808080">#&nbsp;URL&nbsp;경로에&nbsp;따라&nbsp;실행할&nbsp;함수에&nbsp;디코레이터를&nbsp;사용&nbsp;//&nbsp;디코레이터의&nbsp;파라미터는&nbsp;URL입니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;모든&nbsp;데이터를&nbsp;내려받기&nbsp;위한&nbsp;hello()&nbsp;함수를&nbsp;정의합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;hello<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;con&nbsp;이라는&nbsp;변수를&nbsp;생성해&nbsp;데이터베이스를&nbsp;연결합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;hanbit_books&nbsp;데이터베이스의&nbsp;모든&nbsp;데이터를&nbsp;선택합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;hanbit_books&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;JSON&nbsp;문자열로&nbsp;만들어&nbsp;줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;돌려줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li></ol></blockquote></code></pre>
        <p>API 서버의 루트에 접속하면 JSON으로 모든 책 정보를 다운로드할 수 있다. 이제 파라미터를 이용해 조건으로 검색할 수 있게 만들면 된다.</p>
      </article>
    </section>

    <h4 class="sub-header">11.3.3 - 조건에 따라 데이터 가져오기</h4>
    <section>
      <article>
        <p>이제 저자 이름, 출간월을 가져와 보자. 간략하게 URL 을 구성해보면 다음과 같다.</p>
        <ul>
          <li>books/by/author?name=[name]</li>
          <li>books/by/month?month=[month]</li>
        </ul>
        <p>그럼 해당 주소로 데이터를 받는 함수를 만들어보자.</p>
        <h5>코드11-7 데이터 받을 주소 설정하기</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/author&quot;</font><font>&#41;</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_author<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">pass</font></li><li>&nbsp;</li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/month&quot;</font><font>&#41;</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_month<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">pass</font></li></ol></blockquote></code></pre>
        <p>함수 정의 아래 <code>pass</code>라는 코드가 있다. 아무일도 하지 않도록 설정하는 것으로, 이후 조건문 작성이나 프로토타이핑할 때 뼈대 세우기에 사용하면 좋다.</p>
        <p>그럼 두 주소 각각 데이터베이스 연결을 얻고, 데이터를 가져오는 쿼리를 만들고, JSON 형식으로 만들자. [코드11-7]에서 pass를 지우고 작성한다.</p>
        <h5>코드11-8 데이터를 가져올 쿼리 설정하기</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#808080">#&nbsp;저자&nbsp;이름&nbsp;요청을&nbsp;받을&nbsp;url을&nbsp;정해줍니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/author&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;해당&nbsp;url을&nbsp;받아서&nbsp;저자&nbsp;이름을&nbsp;가져올&nbsp;함수를&nbsp;선언합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_author<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;파라미터에서&nbsp;name을&nbsp;받아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;<font color="#66cc66">=</font>&nbsp;request.<font>args</font>.<font>get</font><font>&#40;</font><font color="#483d8b">&quot;name&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;데이터베이스&nbsp;커넥션을&nbsp;가져와서&nbsp;작업합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;작업이&nbsp;끝나면&nbsp;자동으로&nbsp;with가&nbsp;close를&nbsp;호출합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;쿼리를&nbsp;작성합니다.&nbsp;hanbit_books&nbsp;테이블에서&nbsp;author&nbsp;컬럼이</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;name과&nbsp;일치하는&nbsp;걸&nbsp;찾아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;hanbit_books&nbsp;WHERE&nbsp;author&nbsp;LIKE&nbsp;:name&nbsp;ORDER&nbsp;BY&nbsp;title&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;<font color="#66cc66">=</font>&nbsp;<font>&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#483d8b">&quot;name&quot;</font>:&nbsp;<font color="#483d8b">&quot;%&quot;</font>&nbsp;+&nbsp;name&nbsp;+&nbsp;<font color="#483d8b">&quot;%&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font>&#125;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font color="#66cc66">,</font>&nbsp;param<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;JSON&nbsp;문자열로&nbsp;만들어&nbsp;줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;돌려줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;출간월&nbsp;요청을&nbsp;받을&nbsp;url을&nbsp;정해줍니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/month&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;해당&nbsp;url을&nbsp;받아서&nbsp;출간월을&nbsp;가져올&nbsp;함수를&nbsp;선언합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_month<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;파라미터에서&nbsp;month를&nbsp;받아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;month&nbsp;<font color="#66cc66">=</font>&nbsp;request.<font>args</font>.<font>get</font><font>&#40;</font><font color="#483d8b">&quot;month&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;숫자가&nbsp;한&nbsp;자리일&nbsp;경우&nbsp;앞에&nbsp;&quot;0&quot;을&nbsp;붙여줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">if</font>&nbsp;<font color="#008000">int</font><font>&#40;</font>month<font>&#41;</font>&nbsp;<font color="#66cc66">&lt;</font>&nbsp;<font color="#ff4500">10</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;month&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;0&quot;</font>&nbsp;+&nbsp;month</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;쿼리를&nbsp;작성합니다.&nbsp;hanbit_books&nbsp;테이블에서&nbsp;pub_date&nbsp;컬럼의</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;월&nbsp;부분이&nbsp;month와&nbsp;일치하는걸&nbsp;찾아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;hanbit_books&nbsp;WHERE&nbsp;strftime('%m',&nbsp;pub_date)&nbsp;=&nbsp;:month&nbsp;ORDER&nbsp;BY&nbsp;pub_date&nbsp;DESC&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;<font color="#66cc66">=</font>&nbsp;<font>&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#483d8b">&quot;month&quot;</font>:&nbsp;month</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font>&#125;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font color="#66cc66">,</font>&nbsp;param<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;데이터베이스&nbsp;커서의&nbsp;result를&nbsp;받아서&nbsp;JSON&nbsp;문자열로&nbsp;만드는&nbsp;함수입니다.</font></li><li><font color="#ff7700">def</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;json.<font>dumps</font><font>&#40;</font><font color="#008000">list</font><font>&#40;</font>result.<font>fetchall</font><font>&#40;</font><font>&#41;</font><font>&#41;</font><font color="#66cc66">,</font>&nbsp;ensure_ascii<font color="#66cc66">=</font><font color="#008000">False</font><font>&#41;</font>.<font>encode</font><font>&#40;</font><font color="#483d8b">&quot;utf-8&quot;</font><font>&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li></ol></blockquote></code></pre>
        <p>JSON 형식으로 만드는 마지막 함수에는 파이썬 객체를 문자열로 반환하는 <code>json.dumps()</code>를 사용해서 가져온 데이터를 문자열로 만들어 주었다.</p>
      </article>
    </section>

    <h4 class="sub-header">11.3.4 - 최종 코드</h4>
    <section>
      <article>
        <p>이제 코드를 한 군데로 모아 최종 코드로 살펴본다. 지금까지 살펴본 코드를 어떤 위치에서 작성해 조합해야 하는지 살펴보자.</p>
        <h5>코드11-9 hanbit.py 최종코드</h5>
        <pre class="python"><code><blockquote><ol><li><font color="#808080">#&nbsp;-*-&nbsp;coding:&nbsp;utf-8&nbsp;-*-</font></li><li><font color="#808080">#&nbsp;플라스크를&nbsp;임포트합니다.</font></li><li><font color="#ff7700">from</font>&nbsp;flask&nbsp;<font color="#ff7700">import</font>&nbsp;Flask</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;플라스크에서&nbsp;request&nbsp;객체를&nbsp;사용하도록&nbsp;임포트합니다.</font></li><li><font color="#ff7700">from</font>&nbsp;flask&nbsp;<font color="#ff7700">import</font>&nbsp;request</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;JSON&nbsp;라이브러리를&nbsp;임포트합니다.</font></li><li><font color="#ff7700">import</font>&nbsp;json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;SQLite3&nbsp;라이브러리를&nbsp;임포트합니다.</font></li><li><font color="#ff7700">import</font>&nbsp;sqlite3</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;플라스크&nbsp;앱을&nbsp;생성합니다.</font></li><li>app&nbsp;<font color="#66cc66">=</font>&nbsp;Flask<font>&#40;</font>__name__<font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;편의를&nbsp;위한&nbsp;디버그&nbsp;모드를&nbsp;활성화합니다.</font></li><li>app.<font>debug</font>&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#008000">True</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;데이터베이스에&nbsp;연결하는&nbsp;함수를&nbsp;정의합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;-<font color="#66cc66">&gt;</font>&nbsp;sqlite3.<font>connect</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;sqlite3.<font>connect</font><font>&#40;</font><font color="#483d8b">&quot;db.sqlite&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;URL&nbsp;경로에&nbsp;따라&nbsp;실행할&nbsp;함수에&nbsp;디코레이터를&nbsp;사용합니다.&nbsp;디코레이터의&nbsp;파라미터는&nbsp;URL&nbsp;경로입니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;모든&nbsp;데이터를&nbsp;내려받기&nbsp;위한&nbsp;hello()&nbsp;함수를&nbsp;정의합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;hello<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;con이라는&nbsp;변수를&nbsp;생성해&nbsp;데이터베이스에&nbsp;접속합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;커서를&nbsp;가져옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;hanbit_books&nbsp;데이터베이스의&nbsp;모든&nbsp;데이터를&nbsp;선택합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;select&nbsp;*&nbsp;from&nbsp;hanbit_books&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;JSON&nbsp;문자열로&nbsp;만들어줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;돌려줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;저자&nbsp;이름&nbsp;요청을&nbsp;받을&nbsp;url을&nbsp;정해줍니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/author&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;해당&nbsp;url을&nbsp;받아서&nbsp;저자&nbsp;이름을&nbsp;가져올&nbsp;함수를&nbsp;선언합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_author<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;파라미터에서&nbsp;name을&nbsp;받아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;<font color="#66cc66">=</font>&nbsp;request.<font>args</font>.<font>get</font><font>&#40;</font><font color="#483d8b">&quot;name&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;데이터베이스&nbsp;커넥션을&nbsp;가져와서&nbsp;작업합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;작업이&nbsp;끝나면&nbsp;자동으로&nbsp;with가&nbsp;close를&nbsp;호출합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;쿼리를&nbsp;작성합니다.&nbsp;hanbit_books&nbsp;테이블에서&nbsp;author&nbsp;컬럼이</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;name과&nbsp;일치하는&nbsp;걸&nbsp;찾아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;hanbit_books&nbsp;WHERE&nbsp;author&nbsp;LIKE&nbsp;:name&nbsp;ORDER&nbsp;BY&nbsp;title&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;<font color="#66cc66">=</font>&nbsp;<font>&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#483d8b">&quot;name&quot;</font>:&nbsp;<font color="#483d8b">&quot;%&quot;</font>&nbsp;+&nbsp;name&nbsp;+&nbsp;<font color="#483d8b">&quot;%&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font>&#125;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font color="#66cc66">,</font>&nbsp;param<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;JSON&nbsp;문자열로&nbsp;만들어&nbsp;줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;결과를&nbsp;돌려줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;출간월&nbsp;요청을&nbsp;받을&nbsp;url을&nbsp;정해줍니다.</font></li><li><font color="#66cc66">@</font>app.<font>route</font><font>&#40;</font><font color="#483d8b">&quot;/books/by/month&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li><font color="#808080">#&nbsp;해당&nbsp;url을&nbsp;받아서&nbsp;출간월을&nbsp;가져올&nbsp;함수를&nbsp;선언합니다.</font></li><li><font color="#ff7700">def</font>&nbsp;get_books_by_month<font>&#40;</font><font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;파라미터에서&nbsp;month를&nbsp;받아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;month&nbsp;<font color="#66cc66">=</font>&nbsp;request.<font>args</font>.<font>get</font><font>&#40;</font><font color="#483d8b">&quot;month&quot;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;숫자가&nbsp;한&nbsp;자리일&nbsp;경우&nbsp;앞에&nbsp;&quot;0&quot;을&nbsp;붙여줍니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">if</font>&nbsp;<font color="#008000">int</font><font>&#40;</font>month<font>&#41;</font>&nbsp;<font color="#66cc66">&lt;</font>&nbsp;<font color="#ff4500">10</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;month&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;0&quot;</font>&nbsp;+&nbsp;month</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">with</font>&nbsp;get_db_con<font>&#40;</font><font>&#41;</font>&nbsp;<font color="#ff7700">as</font>&nbsp;con:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur&nbsp;<font color="#66cc66">=</font>&nbsp;con.<font>cursor</font><font>&#40;</font><font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;쿼리를&nbsp;작성합니다.&nbsp;hanbit_books&nbsp;테이블에서&nbsp;pub_date&nbsp;컬럼의</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;월&nbsp;부분이&nbsp;month와&nbsp;일치하는걸&nbsp;찾아옵니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;<font color="#66cc66">=</font>&nbsp;<font color="#483d8b">&quot;SELECT&nbsp;*&nbsp;FROM&nbsp;hanbit_books&nbsp;WHERE&nbsp;strftime('%m',&nbsp;pub_date)&nbsp;=&nbsp;:month&nbsp;ORDER&nbsp;BY&nbsp;pub_date&nbsp;DESC&quot;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;<font color="#66cc66">=</font>&nbsp;<font>&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#483d8b">&quot;month&quot;</font>:&nbsp;month</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font>&#125;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;<font color="#66cc66">=</font>&nbsp;cur.<font>execute</font><font>&#40;</font>q<font color="#66cc66">,</font>&nbsp;param<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;데이터베이스&nbsp;커서의&nbsp;result를&nbsp;받아서&nbsp;JSON&nbsp;문자열로&nbsp;만드는&nbsp;함수입니다.</font></li><li><font color="#ff7700">def</font>&nbsp;jsonize<font>&#40;</font>result<font>&#41;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;result_json&nbsp;<font color="#66cc66">=</font>&nbsp;json.<font>dumps</font><font>&#40;</font><font color="#008000">list</font><font>&#40;</font>result.<font>fetchall</font><font>&#40;</font><font>&#41;</font><font>&#41;</font><font color="#66cc66">,</font>&nbsp;ensure_ascii<font color="#66cc66">=</font><font color="#008000">False</font><font>&#41;</font>.<font>encode</font><font>&#40;</font><font color="#483d8b">&quot;utf-8&quot;</font><font>&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff7700">return</font>&nbsp;result_json</li><li>&nbsp;</li><li><font color="#808080">#&nbsp;이&nbsp;파일을&nbsp;바로&nbsp;실행할&nbsp;때&nbsp;함께&nbsp;실행할&nbsp;코드를&nbsp;적습니다.</font></li><li><font color="#ff7700">if</font>&nbsp;__name__&nbsp;<font color="#66cc66">==</font>&nbsp;<font color="#483d8b">&quot;__main__&quot;</font>:</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#808080">#&nbsp;위에서&nbsp;생성한&nbsp;플라스크&nbsp;애플리케이션을&nbsp;실행합니다.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;app.<font>run</font><font>&#40;</font><font>&#41;</font></li></ol></blockquote></code></pre>
        <p>이렇게 데이터베이스의 정보를 조회할 수 있는 API 서버를 만들어 보았다. <code>python hanbit.py</code>를 실행한 후 http://127.0.0.1:5000/books/by/author?name=[name] 혹은 http://127.0.0.1:5000/books/by/month?month=[month] 의 형식으로 접속해보면 데이터를 확인할 수 있다.</p>
        <p>남은 일은 해당 URL 을 이용해서 원하는 데이터를 필요한 곳에 사용하는 일뿐이다.</p>
        <p>플라스크는 이외에도 웹 애플리케이션을 만들 수 있는 다양한 기능을 제공한다. 플라스크를 좀 더 자세히 알고 싶다면 <a href="http://flask-docs-kr.readthedocs.io/ko/latest/" target="_blank">플라스크 개발 문서</a> 등을 참고한다.</p>
      </article>
    </section>
  </div>